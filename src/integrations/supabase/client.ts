
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xhkkzjprtrpwahhaygqm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inhoa2t6anBydHJwd2FoaGF5Z3FtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ2MTMzNTMsImV4cCI6MjA2MDE4OTM1M30.4eXiSAfAEpSLOpveqE5ZMuR1danMM3H7-wbYLqUKTc8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
  },
  global: {
    fetch: (url, options) => {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout
      
      return fetch(url, {
        ...options,
        signal: controller.signal,
      }).finally(() => clearTimeout(timeoutId));
    },
  },
});

// Utility function to check if Supabase is available
export const checkSupabaseConnection = async () => {
  try {
    const { data, error } = await supabase.from('files').select('count').limit(1);
    return !error;
  } catch (err) {
    console.error('Failed to connect to Supabase:', err);
    return false;
  }
};

// Generate a shareable link for files
export const generateShareableLink = (fileId: string) => {
  const baseUrl = window.location.origin;
  return `${baseUrl}/shared/${fileId}`;
};

// Verify if a shared file is accessible
export const verifySharedAccess = async (fileId: string) => {
  try {
    // Check if file exists and is either public or shared with anonymous
    const { data, error } = await supabase
      .from('files')
      .select('*')
      .eq('id', fileId)
      .or(`is_public.eq.true,shared_with.cs.'{anonymous}'`)
      .maybeSingle();
      
    if (error) {
      console.error('Error verifying shared access:', error);
      throw error;
    }
    
    // Check if the file exists and if it's expired
    if (!data) return false;
    
    // Handle expiration
    if (data.expires_at) {
      const expiryDate = new Date(data.expires_at);
      if (expiryDate < new Date()) {
        console.log('File access expired on:', expiryDate.toLocaleString());
        return false;
      }
    }
    
    return true;
  } catch (error) {
    console.error('Error verifying shared access:', error);
    return false;
  }
};

// Share a file via email - creates a sharing record
export const shareFileViaEmail = async (fileId: string, email: string, userId: string) => {
  try {
    // Get current shared_with array
    const { data: file, error: fetchError } = await supabase
      .from('files')
      .select('shared_with')
      .eq('id', fileId)
      .single();
      
    if (fetchError) throw fetchError;
    
    // Update the shared_with array
    const sharedWith = Array.isArray(file.shared_with) ? file.shared_with : [];
    if (!sharedWith.includes(email)) {
      sharedWith.push(email);
      
      const { error: updateError } = await supabase
        .from('files')
        .update({ shared_with: sharedWith })
        .eq('id', fileId);
        
      if (updateError) throw updateError;
      
      // Log the sharing activity
      await supabase.from('activity_logs').insert({
        user_id: userId,
        action: 'shared',
        resource_id: fileId,
        resource_type: 'file',
        details: { shared_with: email }
      });
    }
    
    return true;
  } catch (error) {
    console.error('Error sharing file:', error);
    return false;
  }
};
